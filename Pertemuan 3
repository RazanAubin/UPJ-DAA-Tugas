import datetime as time
import pandas as pd
import numpy as np
#################################################################################
#Latihan 1
x = datetime.date.today()
Mahasiswa = ["Razan Aubin Farras", 2022071043, "Informatika", 
             "DAA", "Universitas Pembangunan Jaya", "Today", str(x)]
for mhs in Mahasiswa:
  print(mhs)
#################################################################################
#Latihan 2
print(Mahasiswa[1])
#################################################################################
#Latihan 3
print(Mahasiswa[4])
#################################################################################
#Latihan 4
Mahasiswa = ["Razan Aubin Farras", 2022071043, "Informatika", 
             "DAA", "Universitas Pembangunan Jaya", "Today"]
print(Mahasiswa[1:3])
#################################################################################
#Latihan 5
Mahasiswa = ["Razan Aubin Farras", "2022071043", "Informatika", 
             "DAA", "Universitas Pembangunan Jaya", "Today"]
for mhs in Mahasiswa:
  print( "UPJ " + mhs)
#################################################################################
#Latihan 6
UPJ = ("Universitas", "Pembangunan", "Jaya")
for kampus in UPJ:
 print (kampus)
#################################################################################
#Latihan 7
nested_tuple = (100, 200, 400, 600, 300, 400, 800)
pertama = nested_tuple[0]
kedua = nested_tuple[1:4]
ketiga = nested_tuple[4]
keempat =nested_tuple[5:]
Hasil = (pertama, kedua, ketiga, keempat)
print(Hasil)

#atau

nested_tuple = (100, (200, 400, 600), 300, (400, 800))
print(nested_tuple)
#################################################################################
#Latihan 8
latihan = {
    "Nama":"Razan Aubin farras",
    "NIM":"2022071043",
    "Prodi":"Informatika",
    "Universitas":"UPJ",
}
for key, value in latihan.items():
    print(f"{key}: {value}")
#################################################################################
#Latihan 9
yellow = {'rose', 'blood', 'fire hydrant', 'leaves'}
red = {'dandelions', 'leaves', 'fire hydrant'}

print(yellow|red)
print(yellow&red)
#################################################################################
#Latihan 10
df = pd.DataFrame([
    ['1','Informatika',50,30,20],
    ['2','Sistem informasi',55,30,25],
    ['3','Teknik Sipil',40,30,10]
])
df.columns = ['No','Prodi','Mahasiswa','Laki-laki','Perempuan']
data = {'No': ['1','2','3'],
        'Prodi' : ['Informatika','Sistem Inormasi','Teknik Sipil'],
        'Mahasiswa': [50,55,40],
        'Laki-Laki' : [30,30,30],
        'Perempuan' : [20,25,10],
        }

df = pd.DataFrame(data, index=['a','b','c'])

df.head()
#################################################################################
#Latihan 11
matriks = np.array([[100, 200, 300], [700, 600, 500], [900, 1000, 800]])
print("Matriks: ")
print(matriks)

transpose = np.transpose(matriks)
print("T-Matriks: ")
print(transpose)
#################################################################################
#Latihan 12
class Stack:
  def __init__ (self):
    self.items = []
  def isEmpty(self):
    return self.items == []
  def push(self, item):
    self.items.append(item)
  def pop(self):
    return self.items.pop()
  def peek(self):
    return self.items[len(self.items)-1]
  def size(self):
    return len(self.items)

stack=Stack()
stack.push('Red')
stack.push('Green')
stack.push('Blue')
stack.push('Yellow')

stack.pop()
stack.isEmpty()
#################################################################################
